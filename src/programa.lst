P16 assembler v1.5 (Feb  9 2024)	d:\1-ISEL\Semestre_2\AC\Trabalhos\AC_Trabalho1_Grupo1\src\programa.lst	Wed Mar 26 23:35:25 2025

Sections
Index   Name            Address   Size
0       .text           0000      007C 124

Symbols
Name                    Type      Value       Section
line#108                LABEL     007A 122    .text
main                    LABEL     0070 112    .text
umull32                 LABEL     0002 2      .text
umull32_else_if         LABEL     0038 56     .text
umull32_for             LABEL     001C 28     .text
umull32_for_end         LABEL     005A 90     .text
umull32_for_init        LABEL     001C 28     .text
umull32_if              LABEL     0022 34     .text
umull32_if_end          LABEL     004A 74     .text

Code listing
   1 0000 37 58	b main
   2           	
   3           	umull32:
   4 0002 0E 24	    push lr
   5 0004 04 24	    push r4
   6 0006 05 24	    push r5
   7 0008 06 24	    push r6
   8 000A 07 24	    push r7
   9 000C 08 24	    push r8
  10 000E 09 24	    push r9
  11           	
  12           	    ; --------- IN ---------
  13           	    ; R1, R0 => M
  14           	    ; R3, R2 => m
  15           	    ; -------- OUT ---------
  16           	    ; R4, R3, R2, R1
  17           	    ; ------ INTERNAL ------
  18           	    ; r6 => TEMP_A
  19           	    ; r7 => TEMP_B
  20           	    ; r8 => p_1
  21           	    ; r9 => i
  22           	
  23           	
  24           	    ; Como o R3 e R2 j√° representam o N,
  25           	    ; para fazer int64_t p = N apenas preciso
  26           	    ; de colocar os restantes registos de maior peso
  27           	    ; = 0, ou seja, R5 e R4 = 0
  28 0010 04 60	    mov r4, #0
  29 0012 05 60	    mov r5, #0
  30           	
  31 0014 06 60	    mov r6, #0 ; TEMP_A
  32 0016 07 60	    mov r7, #0 ; TEMP_B
  33 0018 08 60	    mov r8, #0 ; p_1
  34 001A 09 60	    mov r9, #0 ; i
  35           	
  36           	umull32_for_init:
  37           	umull32_for:
  38 001C 06 62	    mov r6, #32
  39 001E E0 BC	    cmp r6, r9
  40 0020 1C 40	    beq umull32_for_end
  41           	
  42           	umull32_if:
  43 0022 16 60	    mov r6, #1
  44 0024 27 C3	    and r7, r2, r6
  45 0026 06 60	    mov r6, #0
  46 0028 70 BB	    cmp r7, r6
  47 002A 06 44	    bne umull32_else_if
  48           	
  49 002C 16 60	    mov r6, #1
  50 002E 60 BC	    cmp r6, r8
  51 0030 03 44	    bzc umull32_else_if
  52           	
  53 0032 44 80	    add r4, r4, r0
  54 0034 D5 90	    adc r5, r5, r1
  55           	
  56 0036 09 58	    b umull32_if_end
  57           	
  58           	umull32_else_if:
  59           	
  60 0038 16 60	    mov r6, #1
  61 003A 27 C3	    and r7, r2, r6
  62 003C 70 BB	    cmp r7, r6
  63 003E 05 44	    bne umull32_if_end
  64           	
  65 0040 06 60	    mov r6, #0
  66 0042 60 BC	    cmp r6, r8
  67 0044 02 44	    bzc umull32_if_end
  68           	
  69 0046 44 88	    sub r4, r4, r0
  70 0048 D5 98	    sbc r5, r5, r1
  71           	
  72           	umull32_if_end:
  73           	
  74 004A 16 60	    mov r6, #1
  75 004C 28 C3	    and r8, r2, r6
  76           	
  77 004E D5 F0	    asr r5, r5, #1
  78 0050 44 D8	    rrx r4, r4
  79 0052 33 D8	    rrx r3, r3
  80 0054 22 D8	    rrx r2, r2
  81           	
  82 0056 E9 84	    add r9, r6, r9
  83 0058 E1 5B	    b umull32_for
  84           	
  85           	umull32_for_end:
  86 005A 00 B1	    mov r0, r2
  87 005C 81 B1	    mov r1, r3
  88 005E 02 B2	    mov r2, r4
  89 0060 83 B2	    mov r3, r5
  90           	
  91 0062 09 04	    pop r9
  92 0064 08 04	    pop r8
  93 0066 07 04	    pop r7
  94 0068 06 04	    pop r6
  95 006A 05 04	    pop r5
  96 006C 04 04	    pop r4
  97 006E 0F 04	    pop pc
  98           	
  99           	    
 100           	
 101           	main:
 102           	
 103 0070 01 60	    mov r1, #0
 104 0072 30 66	    mov r0, #99
 105 0074 03 60	    mov r3, #0
 106 0076 32 66	    mov r2, #99
 107 0078 C4 5F	    bl umull32
 108 007A FF 5B	    b .
 108           	
