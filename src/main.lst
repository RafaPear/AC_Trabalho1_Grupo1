P16 assembler v1.5 (Feb  9 2024)	d:\1-ISEL\Semestre_2\AC\Trabalhos\AC_Trabalho1_Grupo1\src\main.lst	Sat Mar 29 00:02:41 2025

Sections
Index   Name            Address   Size
0       .text           0000      00F6 246
1       .data           00F6      000E 14
2       .stack          0104      0028 40

Symbols
Name                    Type      Value       Section
line#200                LABEL     00E0 224    .text
line#211                LABEL     00F2 242    .text
line#8                  LABEL     0002 2      .text
main                    LABEL     00D0 208    .text
main_for                LABEL     00DA 218    .text
main_for_init           LABEL     00D8 216    .text
mod                     LABEL     0074 116    .text
mod_end                 LABEL     0084 132    .text
mod_loop                LABEL     007E 126    .text
N                       ABSOLUTE  0005 5      .text
program                 LABEL     00CA 202    .text
rand                    LABEL     008A 138    .text
RAND_MAX                ABSOLUTE  00FF 255    .text
result                  LABEL     00F6 246    .data
result_addr             LABEL     00F4 244    .text
seed                    LABEL     0100 256    .data
seed_addr               LABEL     00C8 200    .text
srand                   LABEL     0068 104    .text
STACK_SIZE              ABSOLUTE  0028 40     .text
stack_top               LABEL     012C 300    .stack
stack_top_addr          LABEL     00CE 206    .text
umull32                 LABEL     0004 4      .text
umull32_else_if         LABEL     0036 54     .text
umull32_for             LABEL     001E 30     .text
umull32_for_end         LABEL     0056 86     .text
umull32_if              LABEL     0024 36     .text
umull32_if_end          LABEL     0046 70     .text

Code listing
   1          	.equ STACK_SIZE, 40
   2          	.equ RAND_MAX, 0xFF
   3          	.equ N, 5
   4           	
   5           	    .text
   6           	
   7 0000 64 58	    b   program
   8 0002 FF 5B	    b . ; Reservado (ISR)
   9           	
  10           	    umull32:
  11 0004 0E 24	        push lr
  12 0006 04 24	        push r4
  13 0008 05 24	        push r5
  14 000A 06 24	        push r6
  15 000C 07 24	        push r7
  16 000E 08 24	        push r8
  17 0010 09 24	        push r9
  18           	
  19           	        ; --------- IN ---------
  20           	        ; R1, R0 => M
  21           	        ; R3, R2 => m
  22           	        ; -------- OUT ---------
  23           	        ; R4, R3, R2, R1
  24           	        ; ------ INTERNAL ------
  25           	        ; r6 => TEMP_A
  26           	        ; r7 => TEMP_B
  27           	        ; r8 => p_1
  28           	        ; r9 => i
  29           	
  30           	
  31           	        ; Como o R3 e R2 já representam o N,
  32           	        ; para fazer int64_t p = N apenas preciso
  33           	        ; de colocar os restantes registos de maior peso
  34           	        ; = 0, ou seja, R5 e R4 = 0
  35 0012 04 60	        mov r4, #0
  36 0014 05 60	        mov r5, #0
  37           	
  38 0016 06 60	        mov r6, #0 ; TEMP_A
  39 0018 07 60	        mov r7, #0 ; TEMP_B
  40 001A 08 60	        mov r8, #0 ; p_1
  41 001C 09 60	        mov r9, #0 ; i
  42           	    
  43           	    umull32_for:
  44 001E 06 62	        mov r6, #32
  45 0020 E0 BC	        cmp r6, r9
  46 0022 19 40	        beq umull32_for_end
  47           	
  48           	    umull32_if:
  49 0024 16 60	        mov r6, #1
  50 0026 27 C3	        and r7, r2, r6
  51 0028 06 44	        bzc umull32_else_if
  52           	
  53 002A 16 60	        mov r6, #1
  54 002C 60 BC	        cmp r6, r8
  55 002E 03 44	        bzc umull32_else_if
  56           	
  57 0030 44 80	        add r4, r4, r0
  58 0032 D5 90	        adc r5, r5, r1
  59           	
  60 0034 08 58	        b umull32_if_end
  61           	
  62           	    umull32_else_if:
  63           	
  64 0036 16 60	        mov r6, #1
  65 0038 27 C3	        and r7, r2, r6
  66 003A 05 40	        bzs umull32_if_end
  67           	
  68 003C 06 60	        mov r6, #0
  69 003E 60 BC	        cmp r6, r8
  70 0040 02 44	        bzc umull32_if_end
  71           	
  72 0042 44 88	        sub r4, r4, r0
  73 0044 D5 98	        sbc r5, r5, r1
  74           	
  75           	    umull32_if_end:
  76           	
  77 0046 16 60	        mov r6, #1
  78 0048 28 C3	        and r8, r2, r6
  79           	
  80 004A D5 F0	        asr r5, r5, #1
  81 004C 44 D8	        rrx r4, r4
  82 004E 33 D8	        rrx r3, r3
  83 0050 22 D8	        rrx r2, r2
  84           	
  85 0052 E9 84	        add r9, r6, r9
  86 0054 E4 5B	        b umull32_for
  87           	
  88           	    umull32_for_end:
  89 0056 00 B1	        mov r0, r2
  90 0058 81 B1	        mov r1, r3
  91           	
  92 005A 09 04	        pop r9
  93 005C 08 04	        pop r8
  94 005E 07 04	        pop r7
  95 0060 06 04	        pop r6
  96 0062 05 04	        pop r5
  97 0064 04 04	        pop r4
  98 0066 0F 04	        pop pc
  99           	
 100           	    srand:
 101 0068 04 24	        push r4
 102 006A E4 0E	        ldr r4, seed_addr
 103 006C 40 20	        str r0, [r4]
 104 006E C1 20	        str r1, [r4, #2]
 105 0070 04 04	        pop r4
 106 0072 0F B7	        mov pc, lr
 107           	
 108           	    mod:
 109 0074 04 24	        push r4
 110 0076 05 24	        push r5
 111 0078 04 89	        sub r4, r0, r2
 112 007A 95 99	        sbc r5, r1, r3
 113 007C 03 4C	        bcc mod_end
 114           	    mod_loop:
 115 007E 00 89	        sub r0, r0, r2
 116 0080 91 99	        sbc r1, r1, r3
 117 0082 FD 4B	        bcs mod_loop
 118           	    mod_end:
 119 0084 05 04	        pop r5
 120 0086 04 04	        pop r4
 121 0088 0F B7	        mov pc, lr
 122           	
 123           	    rand:
 124 008A 0E 24	        push lr
 125 008C 01 24	        push r1
 126 008E 02 24	        push r2
 127 0090 03 24	        push r3
 128 0092 04 24	        push r4
 129 0094 05 24	        push r5
 130           	
 131 0096 84 0D	        ldr r4, seed_addr
 132 0098 F5 6F	        mov r5, #RAND_MAX
 133 009A F5 7F	        movt r5, #RAND_MAX
 134           	
 135 009C 40 00	        ldr r0, [r4]
 136 009E C1 00	        ldr r1, [r4, #2]
 137           	
 138           	        ; prepara para umull32: seed * 214013
 139           	        ; 214013 = 0x000343FD (32 bits)
 140 00A0 D2 6F	        mov r2, #0xFD   ; parte inferior
 141 00A2 32 74	        movt r2, #0x43  ; parte superior
 142 00A4 33 60	        mov r3, #0x03   ; parte inferior
 143 00A6 AE 5F	        bl umull32  ; seed * 214013
 144           	
 145           	        ; adiciona 2531011 (0x00269EC3) ao resultado
 146           	        ; para 64 bits, é preciso carry
 147 00A8 32 6C	        mov r2, #0xC3   ; parte inferior
 148 00AA E2 79	        movt r2, #0x9E  ; parte superior
 149 00AC 63 62	        mov r3, #0x26   ; parte inferior
 150 00AE 00 81	        add r0, r0, r2
 151 00B0 91 91	        adc r1, r1, r3
 152           	
 153 00B2 82 B2	        mov r2, r5
 154 00B4 83 B2	        mov r3, r5
 155           	
 156 00B6 DE 5F	        bl mod
 157 00B8 D7 5F	        bl srand
 158           	
 159           	        ; retorna o resultado (seed >> 16)
 160 00BA 80 B0	        mov r0, r1     ; retorna os 16 bits superiores
 161           	        
 162 00BC 05 04	        pop r5
 163 00BE 04 04	        pop r4
 164 00C0 03 04	        pop r3
 165 00C2 02 04	        pop r2
 166 00C4 01 04	        pop r1
 167 00C6 0F 04	        pop pc    ; retorna
 168           	
 169 00C8 00 01	    seed_addr: .word seed
 170           	
 171           	
 172           	program:
 173 00CA 1D 0C	    ldr sp, stack_top_addr
 174 00CC 01 58	    b main
 175           	stack_top_addr:
 176 00CE 2C 01	    .word stack_top
 177           	
 178           	main:
 179           	    ; -------- Variáveis --------
 180           	    ; r0 => rand_number / erro
 181           	    ; r4 => TEMP_A r3
 182           	    ; r5 => TEMP_B r4
 183           	    ; r6 => i r2
 184           	
 185           	    ; Parametros para o Srand
 186 00D0 F0 62	    mov r0, #0x2F  ; r0 = 47
 187 00D2 50 71	    movt r0, #0x15 ; r0 = 5423
 188 00D4 01 60	    mov r1, #0     ; r1 = 0
 189           	
 190 00D6 C8 5F	    bl srand
 191           	
 192           	main_for_init:
 193 00D8 06 60	    mov r6, #0 ; i = 0
 194           	main_for:
 195 00DA 54 60	    mov r4, #N
 196 00DC 60 BA	    cmp r6, r4 ; i < N
 197           	    ; predefine r0 = 0 para error = 0 caso
 198           	    ; a condicao se verifique
 199 00DE 00 60	    mov r0, #0
 200 00E0 FF 4B	    bhs .
 201           	
 202 00E2 D3 5F	    bl rand ; r0 = rand_number
 203           	    
 204 00E4 74 0C	    ldr r4, result_addr
 205 00E6 E5 E0	    lsl r5, r6, #1 ; i * 2 para indexar corretamente
 206 00E8 C5 12	    ldr r5, [r4, r5]
 207 00EA E6 A0	    add r6, r6, #1
 208 00EC 80 BA	    cmp r0, r5
 209 00EE F5 43	    bzs main_for
 210 00F0 10 60	    mov r0, #1
 211 00F2 FF 5B	    b .
 212           	
 213 00F4 F6 00	    result_addr: .word result
 214           	
 215           	    .data  ; Variáveis globais
 216           	
 217           	    result:
 218          	        .word 17747, 2055, 3664, 15611, 981
 218 00F6 53 45 07 08 50 0E FB 3C D5 03
 219           	    
 220           	    seed:
 221          	        .word 1, 0
 221 0100 01 00 00 00
 222           	
 223           	    .stack
 224           	
 225 0104 00   	    .space  STACK_SIZE
 225 .... ..
 225 012B 00
 226           	stack_top:
 226           	
